// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  RESIDENT
  ORGANIZER
}

model User {
  id       Int    @id @default(autoincrement())
  username String
  password String
  email    String
  role     Role

  createdEvents  Event[]
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id])
  neighborhoodId Int

  joinedEvents Event[]     @relation("JoinedEvents")
  Comment      Comment[]
  EcoAction    EcoAction[]

  likedComments Comment[] @relation("CommentLikes")
}

model Neighborhood {
  id   Int    @id @default(autoincrement())
  name String

  users User[]
}

model Event {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  location    String
  description String?
  isPublic    Boolean  @default(true)

  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int

  participations User[] @relation("JoinedEvents")

  comments Comment[]
  updates  PostUpdate[]
}

model PostUpdate {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   Int?
}

model Comment {
  id       Int     @id @default(autoincrement())
  content  String
  imageUrl String?
  author   User    @relation(fields: [authorId], references: [id])
  authorId Int

  createdAt DateTime  @default(now())

  event   Event? @relation(fields: [eventId], references: [id])
  eventId Int?

  likedBy User[] @relation("CommentLikes")
}

model EcoAction {
  id          Int      @id @default(autoincrement())
  title       String
  carbonSaved Float
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())

  log         ActionLog @relation(fields: [actionLogId], references: [id])
  actionLogId Int
}

model ActionLog {
  id        Int         @id @default(autoincrement())
  EcoAction EcoAction[]
}
